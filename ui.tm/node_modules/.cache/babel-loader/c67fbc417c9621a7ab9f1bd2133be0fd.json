{"ast":null,"code":"const postRequest = async function (url) {\n  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : `POST`;\n  let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  try {\n    if (body) {\n      body = JSON.stringify(body);\n      headers['Content-Type'] = 'application/json';\n    }\n\n    const response = await fetch(url, {\n      method: method,\n      headers: headers,\n      body: body\n    });\n    const parsedData = await response.json();\n    return parsedData;\n  } catch (err) {\n    console.log(err.message);\n  }\n};\n\nconst putRequest = async function (url) {\n  let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : `PUT`;\n  let body = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let headers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n\n  try {\n    if (body) {\n      body = JSON.stringify(body);\n      headers['Content-Type'] = 'application/json';\n    }\n\n    const response = await fetch(url, {\n      method: method,\n      headers: headers,\n      body: body\n    });\n    const parsedData = await response.json();\n    return parsedData;\n  } catch (err) {\n    console.log(err.message);\n  }\n};\n\nexport default {\n  postRequest,\n  putRequest\n};","map":{"version":3,"names":["postRequest","url","method","body","headers","JSON","stringify","response","fetch","parsedData","json","err","console","log","message","putRequest"],"sources":["C:/Users/HP/Desktop/task-manager-ui/ui.tm/src/hooks/http.hooks.js"],"sourcesContent":["const postRequest = async (url, method = `POST`, body = null, headers = {}) => {\r\n    try {\r\n        if (body) {\r\n            body = JSON.stringify(body);\r\n            headers['Content-Type'] = 'application/json';\r\n        }\r\n        const response = await fetch(url, {method: method, headers: headers, body: body})\r\n        const parsedData = await  response.json();\r\n        return parsedData;\r\n    } catch (err) {\r\n        console.log(err.message);\r\n    }\r\n}\r\nconst putRequest = async (url, method = `PUT`, body = null, headers = {}) => {\r\n    try {\r\n        if (body) {\r\n            body = JSON.stringify(body);\r\n            headers['Content-Type'] = 'application/json';\r\n        }\r\n        const response = await fetch(url, {method: method, headers: headers, body: body})\r\n        const parsedData = await  response.json();\r\n        return parsedData;\r\n    } catch (err) {\r\n        console.log(err.message);\r\n    }\r\n}\r\nexport default {postRequest, putRequest};"],"mappings":"AAAA,MAAMA,WAAW,GAAG,gBAAOC,GAAP,EAA2D;EAAA,IAA/CC,MAA+C,uEAArC,MAAqC;EAAA,IAA9BC,IAA8B,uEAAvB,IAAuB;EAAA,IAAjBC,OAAiB,uEAAP,EAAO;;EAC3E,IAAI;IACA,IAAID,IAAJ,EAAU;MACNA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP;MACAC,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;IACH;;IACD,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAM;MAACC,MAAM,EAAEA,MAAT;MAAiBE,OAAO,EAAEA,OAA1B;MAAmCD,IAAI,EAAEA;IAAzC,CAAN,CAA5B;IACA,MAAMM,UAAU,GAAG,MAAOF,QAAQ,CAACG,IAAT,EAA1B;IACA,OAAOD,UAAP;EACH,CARD,CAQE,OAAOE,GAAP,EAAY;IACVC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;EACH;AACJ,CAZD;;AAaA,MAAMC,UAAU,GAAG,gBAAOd,GAAP,EAA0D;EAAA,IAA9CC,MAA8C,uEAApC,KAAoC;EAAA,IAA9BC,IAA8B,uEAAvB,IAAuB;EAAA,IAAjBC,OAAiB,uEAAP,EAAO;;EACzE,IAAI;IACA,IAAID,IAAJ,EAAU;MACNA,IAAI,GAAGE,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAP;MACAC,OAAO,CAAC,cAAD,CAAP,GAA0B,kBAA1B;IACH;;IACD,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACP,GAAD,EAAM;MAACC,MAAM,EAAEA,MAAT;MAAiBE,OAAO,EAAEA,OAA1B;MAAmCD,IAAI,EAAEA;IAAzC,CAAN,CAA5B;IACA,MAAMM,UAAU,GAAG,MAAOF,QAAQ,CAACG,IAAT,EAA1B;IACA,OAAOD,UAAP;EACH,CARD,CAQE,OAAOE,GAAP,EAAY;IACVC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,OAAhB;EACH;AACJ,CAZD;;AAaA,eAAe;EAACd,WAAD;EAAce;AAAd,CAAf"},"metadata":{},"sourceType":"module"}